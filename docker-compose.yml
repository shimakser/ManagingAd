version: '3.3'

services:

#elk
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - type: bind
        source: ./elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
    networks:
      - network

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.5.1
    volumes:
      - type: volume
        source: log
        target: /managingad/log
        read_only: true
      - type: bind
        source: ./elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    networks:
      - network
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.5.1
    volumes:
      - type: bind
        source: ./elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - network
    depends_on:
      - elasticsearch

#measage brokers
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - network

  broker:
    image: confluentinc/cp-kafka:6.2.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - network

#databases
  postgres:
    container_name: postgresdb
    image: postgres:14
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_MULTIPLE_DATABASES: managingad,offices,dictionary,keycloak_db
    restart: always
    networks:
      - network

  mongodb:
    container_name: mongodb
    image: mongo:4.2.17
    ports:
      - "27017:27017"
    environment:
      MONGO_DB: ManagingAd
      MONGO_HOST: mongodb
    restart: always
    networks:
      - network

#keycloak
  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak_db
      DB_USER: postgres
      DB_PASSWORD: root
      KEYCLOAK_USER: root
      KEYCLOAK_PASSWORD: root
    ports:
      - "9000:8080"
    depends_on:
      - postgres
    networks:
      - network

#cache
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    depends_on:
      - postgres
    networks:
      - network

#applications
  app:
    container_name: managingad
    image: application-app
    build:
      context: .
      dockerfile: Dockerfile-app
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: postgresdb
      POSTGRES_PORT: 5432
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      DB: managingad
      KAFKA_PORT: 29092
      KAFKA_HOST: broker
      CURRENCIES_HOST: currencies
      CURRENCIES_PORT: 8081
      KEYCLOAK_REALM: SpringBootKeycloak
      KEYCLOAK_CLIENT: managingad-app
      KEYCLOAK_SERVER: http://localhost:9000/auth
      KEYCLOAK_SECRET: 16NaIfpxQ7BWZ5yGhn5BK1AWs3YtdVAt
      KEYCLOAK_USERNAME: root
      KEYCLOAK_PASSWORD: root
    volumes:
      - log:/managingad/log
    depends_on:
      - postgres
      - keycloak
      - mongodb
      - broker
    networks:
      - network

  currencies:
    container_name: currencies
    image: currencies-app
    build:
      context: .
      dockerfile: Dockerfile-currencies
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      CURRENCIES_URL: www.cbr-xml-daily.ru/daily_json.js
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      DB: ManagingAd
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - network

  offices:
    container_name: offices
    image: offices-app
    build:
      context: .
      dockerfile: Dockerfile-offices
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: postgresdb
      POSTGRES_PORT: 5432
      DB: offices
    depends_on:
      - postgres
    networks:
      - network

  listener:
    container_name: listener
    image: listener-app
    build:
      context: .
      dockerfile: Dockerfile-listener
    ports:
      - "8083:8083"
    environment:
      PORT: 8083
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
    depends_on:
      - rabbitmq
      - currencies
    networks:
      - network

  dictionary:
    container_name: dictionary
    image: dictionary-app
    build:
      context: .
      dockerfile: Dockerfile-dictionary
    ports:
      - "8084:8084"
    environment:
      PORT: 8084
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_HOST: postgresdb
      POSTGRES_PORT: 5432
      DB: dictionary
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - postgres
      - redis
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  elasticsearch:
  log: